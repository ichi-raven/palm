cmake_minimum_required(VERSION 3.22.0 FATAL_ERROR)
project(palm LANGUAGES CXX)

list(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Options

# Common targets
set(MAIN_EXE "main")

# C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED 20)

# Macro
#add_definitions("-D_USE_MATH_DEFINES")
add_definitions("-D_CRT_SECURE_NO_WARNINGS")

# Compiler flags
if(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -Wall")
  set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
  set(CMAKE_CXX_FLAGS_RELEASE "-g -O2")
elseif (MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /Zi")
  add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
  add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /ignore:4099")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /ignore:4099")
  set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} /ignore:4099")
endif()

# Vulkan
find_package(Vulkan REQUIRED shaderc_combined SPIRV-Tools)

# Output directories
if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_BINARY_DIR}/bin)
endif()

if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_BINARY_DIR}/bin)
endif()

if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_BINARY_DIR}/lib)
endif()

# Traverse subdirectories
set(CMAKE_DEBUG_POSTFIX "-debug")

# directories
set(VK2S_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/vk2s)
set(GLFW_DIR  ${VK2S_DIR}/ThirdParty/GLFW)
set(STB_DIR   ${VK2S_DIR}/ThirdParty/stb)
set(GLM_DIR   ${VK2S_DIR}/ThirdParty/glm)
set(IMGUI_DIR ${VK2S_DIR}/ThirdParty/imgui)
set(IMGUI_BACKEND_DIR ${VK2S_DIR}/ThirdParty/imgui/backends)
set(IMGUIZMO_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/ImGuizmo)  
set(IMFILEBROWSER_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/ImFileBrowser)
set(SPIRV_REFLECT_DIR ${VK2S_DIR}/ThirdParty/SPIRV-Reflect)
set(ASSIMP_DIR ${VK2S_DIR}/ThirdParty/Assimp)
set(ASSIMP_INCLUDE_DIR ${ASSIMP_DIR}/include ${CMAKE_BINARY_DIR}/ThirdParty/vk2s/ThirdParty/Assimp/include)
set(EC2S_DIR ${CMAKE_SOURCE_DIR}/ThirdParty/EC2S)
set(SLANG_DIR ${VK2S_DIR}/ThirdParty/slang)
set(SLANG_LIB_NAME slang)

# GLFW
set(GLFW_LIB_NAME glfw3)

# Assimp
set(ASSIMP_LIB_NAME assimp-vc143-mt)

# vk2s
add_subdirectory(${VK2S_DIR})
set(VK2S_LIB_NAME vk2s)

add_subdirectory(src)